'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.296
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SUPORT")>  _
Partial Public Class dbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertdato_rpt(instance As dato_rpt)
    End Sub
  Partial Private Sub Updatedato_rpt(instance As dato_rpt)
    End Sub
  Partial Private Sub Deletedato_rpt(instance As dato_rpt)
    End Sub
  Partial Private Sub Inserthistorial(instance As historial)
    End Sub
  Partial Private Sub Updatehistorial(instance As historial)
    End Sub
  Partial Private Sub Deletehistorial(instance As historial)
    End Sub
  Partial Private Sub Inserttipo_detalle(instance As tipo_detalle)
    End Sub
  Partial Private Sub Updatetipo_detalle(instance As tipo_detalle)
    End Sub
  Partial Private Sub Deletetipo_detalle(instance As tipo_detalle)
    End Sub
  Partial Private Sub Inserttrabajador(instance As trabajador)
    End Sub
  Partial Private Sub Updatetrabajador(instance As trabajador)
    End Sub
  Partial Private Sub Deletetrabajador(instance As trabajador)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.FrmHistorial.My.MySettings.Default.SUPORTConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property dato_rpt() As System.Data.Linq.Table(Of dato_rpt)
		Get
			Return Me.GetTable(Of dato_rpt)
		End Get
	End Property
	
	Public ReadOnly Property historial() As System.Data.Linq.Table(Of historial)
		Get
			Return Me.GetTable(Of historial)
		End Get
	End Property
	
	Public ReadOnly Property tipo_detalle() As System.Data.Linq.Table(Of tipo_detalle)
		Get
			Return Me.GetTable(Of tipo_detalle)
		End Get
	End Property
	
	Public ReadOnly Property trabajador() As System.Data.Linq.Table(Of trabajador)
		Get
			Return Me.GetTable(Of trabajador)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dato_rpt")>  _
Partial Public Class dato_rpt
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DATO_ID As Integer
	
	Private _DATO_DESC As String
	
	Private _DATO_TIPOCONTROL As Byte
	
	Private _DATO_LONGITUDTEXTO As System.Nullable(Of Integer)
	
	Private _TIPO_ID As System.Nullable(Of Integer)
	
	Private _historial As EntitySet(Of historial)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDATO_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDATO_IDChanged()
    End Sub
    Partial Private Sub OnDATO_DESCChanging(value As String)
    End Sub
    Partial Private Sub OnDATO_DESCChanged()
    End Sub
    Partial Private Sub OnDATO_TIPOCONTROLChanging(value As Byte)
    End Sub
    Partial Private Sub OnDATO_TIPOCONTROLChanged()
    End Sub
    Partial Private Sub OnDATO_LONGITUDTEXTOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDATO_LONGITUDTEXTOChanged()
    End Sub
    Partial Private Sub OnTIPO_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTIPO_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._historial = New EntitySet(Of historial)(AddressOf Me.attach_historial, AddressOf Me.detach_historial)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATO_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DATO_ID() As Integer
		Get
			Return Me._DATO_ID
		End Get
		Set
			If ((Me._DATO_ID = value)  _
						= false) Then
				Me.OnDATO_IDChanging(value)
				Me.SendPropertyChanging
				Me._DATO_ID = value
				Me.SendPropertyChanged("DATO_ID")
				Me.OnDATO_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATO_DESC", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DATO_DESC() As String
		Get
			Return Me._DATO_DESC
		End Get
		Set
			If (String.Equals(Me._DATO_DESC, value) = false) Then
				Me.OnDATO_DESCChanging(value)
				Me.SendPropertyChanging
				Me._DATO_DESC = value
				Me.SendPropertyChanged("DATO_DESC")
				Me.OnDATO_DESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATO_TIPOCONTROL", DbType:="TinyInt NOT NULL")>  _
	Public Property DATO_TIPOCONTROL() As Byte
		Get
			Return Me._DATO_TIPOCONTROL
		End Get
		Set
			If ((Me._DATO_TIPOCONTROL = value)  _
						= false) Then
				Me.OnDATO_TIPOCONTROLChanging(value)
				Me.SendPropertyChanging
				Me._DATO_TIPOCONTROL = value
				Me.SendPropertyChanged("DATO_TIPOCONTROL")
				Me.OnDATO_TIPOCONTROLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATO_LONGITUDTEXTO", DbType:="Int")>  _
	Public Property DATO_LONGITUDTEXTO() As System.Nullable(Of Integer)
		Get
			Return Me._DATO_LONGITUDTEXTO
		End Get
		Set
			If (Me._DATO_LONGITUDTEXTO.Equals(value) = false) Then
				Me.OnDATO_LONGITUDTEXTOChanging(value)
				Me.SendPropertyChanging
				Me._DATO_LONGITUDTEXTO = value
				Me.SendPropertyChanged("DATO_LONGITUDTEXTO")
				Me.OnDATO_LONGITUDTEXTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPO_ID", DbType:="Int")>  _
	Public Property TIPO_ID() As System.Nullable(Of Integer)
		Get
			Return Me._TIPO_ID
		End Get
		Set
			If (Me._TIPO_ID.Equals(value) = false) Then
				Me.OnTIPO_IDChanging(value)
				Me.SendPropertyChanging
				Me._TIPO_ID = value
				Me.SendPropertyChanged("TIPO_ID")
				Me.OnTIPO_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dato_rpt_historial", Storage:="_historial", ThisKey:="DATO_ID", OtherKey:="DATO_ID")>  _
	Public Property historial() As EntitySet(Of historial)
		Get
			Return Me._historial
		End Get
		Set
			Me._historial.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_historial(ByVal entity As historial)
		Me.SendPropertyChanging
		entity.dato_rpt = Me
	End Sub
	
	Private Sub detach_historial(ByVal entity As historial)
		Me.SendPropertyChanging
		entity.dato_rpt = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.historial")>  _
Partial Public Class historial
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRAB_ID As Integer
	
	Private _DATO_ID As Integer
	
	Private _TIPO_ID As System.Nullable(Of Integer)
	
	Private _TDET_ID As System.Nullable(Of Byte)
	
	Private _HIST_FECHA As System.Nullable(Of Date)
	
	Private _HIST_TEXTO As String
	
	Private _dato_rpt As EntityRef(Of dato_rpt)
	
	Private _tipo_detalle As EntityRef(Of tipo_detalle)
	
	Private _trabajador As EntityRef(Of trabajador)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRAB_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTRAB_IDChanged()
    End Sub
    Partial Private Sub OnDATO_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDATO_IDChanged()
    End Sub
    Partial Private Sub OnTIPO_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTIPO_IDChanged()
    End Sub
    Partial Private Sub OnTDET_IDChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTDET_IDChanged()
    End Sub
    Partial Private Sub OnHIST_FECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHIST_FECHAChanged()
    End Sub
    Partial Private Sub OnHIST_TEXTOChanging(value As String)
    End Sub
    Partial Private Sub OnHIST_TEXTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._dato_rpt = CType(Nothing, EntityRef(Of dato_rpt))
		Me._tipo_detalle = CType(Nothing, EntityRef(Of tipo_detalle))
		Me._trabajador = CType(Nothing, EntityRef(Of trabajador))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRAB_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRAB_ID() As Integer
		Get
			Return Me._TRAB_ID
		End Get
		Set
			If ((Me._TRAB_ID = value)  _
						= false) Then
				If Me._trabajador.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTRAB_IDChanging(value)
				Me.SendPropertyChanging
				Me._TRAB_ID = value
				Me.SendPropertyChanged("TRAB_ID")
				Me.OnTRAB_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATO_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DATO_ID() As Integer
		Get
			Return Me._DATO_ID
		End Get
		Set
			If ((Me._DATO_ID = value)  _
						= false) Then
				If Me._dato_rpt.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDATO_IDChanging(value)
				Me.SendPropertyChanging
				Me._DATO_ID = value
				Me.SendPropertyChanged("DATO_ID")
				Me.OnDATO_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPO_ID", DbType:="Int")>  _
	Public Property TIPO_ID() As System.Nullable(Of Integer)
		Get
			Return Me._TIPO_ID
		End Get
		Set
			If (Me._TIPO_ID.Equals(value) = false) Then
				If Me._tipo_detalle.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTIPO_IDChanging(value)
				Me.SendPropertyChanging
				Me._TIPO_ID = value
				Me.SendPropertyChanged("TIPO_ID")
				Me.OnTIPO_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TDET_ID", DbType:="TinyInt")>  _
	Public Property TDET_ID() As System.Nullable(Of Byte)
		Get
			Return Me._TDET_ID
		End Get
		Set
			If (Me._TDET_ID.Equals(value) = false) Then
				If Me._tipo_detalle.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTDET_IDChanging(value)
				Me.SendPropertyChanging
				Me._TDET_ID = value
				Me.SendPropertyChanged("TDET_ID")
				Me.OnTDET_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIST_FECHA", DbType:="SmallDateTime")>  _
	Public Property HIST_FECHA() As System.Nullable(Of Date)
		Get
			Return Me._HIST_FECHA
		End Get
		Set
			If (Me._HIST_FECHA.Equals(value) = false) Then
				Me.OnHIST_FECHAChanging(value)
				Me.SendPropertyChanging
				Me._HIST_FECHA = value
				Me.SendPropertyChanged("HIST_FECHA")
				Me.OnHIST_FECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIST_TEXTO", DbType:="VarChar(200)")>  _
	Public Property HIST_TEXTO() As String
		Get
			Return Me._HIST_TEXTO
		End Get
		Set
			If (String.Equals(Me._HIST_TEXTO, value) = false) Then
				Me.OnHIST_TEXTOChanging(value)
				Me.SendPropertyChanging
				Me._HIST_TEXTO = value
				Me.SendPropertyChanged("HIST_TEXTO")
				Me.OnHIST_TEXTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="dato_rpt_historial", Storage:="_dato_rpt", ThisKey:="DATO_ID", OtherKey:="DATO_ID", IsForeignKey:=true)>  _
	Public Property dato_rpt() As dato_rpt
		Get
			Return Me._dato_rpt.Entity
		End Get
		Set
			Dim previousValue As dato_rpt = Me._dato_rpt.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._dato_rpt.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._dato_rpt.Entity = Nothing
					previousValue.historial.Remove(Me)
				End If
				Me._dato_rpt.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.historial.Add(Me)
					Me._DATO_ID = value.DATO_ID
				Else
					Me._DATO_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("dato_rpt")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_detalle_historial", Storage:="_tipo_detalle", ThisKey:="TIPO_ID,TDET_ID", OtherKey:="TIPO_ID,TDET_ID", IsForeignKey:=true)>  _
	Public Property tipo_detalle() As tipo_detalle
		Get
			Return Me._tipo_detalle.Entity
		End Get
		Set
			Dim previousValue As tipo_detalle = Me._tipo_detalle.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_detalle.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_detalle.Entity = Nothing
					previousValue.historial.Remove(Me)
				End If
				Me._tipo_detalle.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.historial.Add(Me)
					Me._TIPO_ID = value.TIPO_ID
					Me._TDET_ID = value.TDET_ID
				Else
					Me._TIPO_ID = CType(Nothing, Nullable(Of Integer))
					Me._TDET_ID = CType(Nothing, Nullable(Of Byte))
				End If
				Me.SendPropertyChanged("tipo_detalle")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="trabajador_historial", Storage:="_trabajador", ThisKey:="TRAB_ID", OtherKey:="TRAB_ID", IsForeignKey:=true)>  _
	Public Property trabajador() As trabajador
		Get
			Return Me._trabajador.Entity
		End Get
		Set
			Dim previousValue As trabajador = Me._trabajador.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._trabajador.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._trabajador.Entity = Nothing
					previousValue.historial.Remove(Me)
				End If
				Me._trabajador.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.historial.Add(Me)
					Me._TRAB_ID = value.TRAB_ID
				Else
					Me._TRAB_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("trabajador")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipo_detalle")>  _
Partial Public Class tipo_detalle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TIPO_ID As Integer
	
	Private _TDET_ID As Byte
	
	Private _TDET_DESC As String
	
	Private _historial As EntitySet(Of historial)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTIPO_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTIPO_IDChanged()
    End Sub
    Partial Private Sub OnTDET_IDChanging(value As Byte)
    End Sub
    Partial Private Sub OnTDET_IDChanged()
    End Sub
    Partial Private Sub OnTDET_DESCChanging(value As String)
    End Sub
    Partial Private Sub OnTDET_DESCChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._historial = New EntitySet(Of historial)(AddressOf Me.attach_historial, AddressOf Me.detach_historial)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPO_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TIPO_ID() As Integer
		Get
			Return Me._TIPO_ID
		End Get
		Set
			If ((Me._TIPO_ID = value)  _
						= false) Then
				Me.OnTIPO_IDChanging(value)
				Me.SendPropertyChanging
				Me._TIPO_ID = value
				Me.SendPropertyChanged("TIPO_ID")
				Me.OnTIPO_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TDET_ID", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TDET_ID() As Byte
		Get
			Return Me._TDET_ID
		End Get
		Set
			If ((Me._TDET_ID = value)  _
						= false) Then
				Me.OnTDET_IDChanging(value)
				Me.SendPropertyChanging
				Me._TDET_ID = value
				Me.SendPropertyChanged("TDET_ID")
				Me.OnTDET_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TDET_DESC", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TDET_DESC() As String
		Get
			Return Me._TDET_DESC
		End Get
		Set
			If (String.Equals(Me._TDET_DESC, value) = false) Then
				Me.OnTDET_DESCChanging(value)
				Me.SendPropertyChanging
				Me._TDET_DESC = value
				Me.SendPropertyChanged("TDET_DESC")
				Me.OnTDET_DESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_detalle_historial", Storage:="_historial", ThisKey:="TIPO_ID,TDET_ID", OtherKey:="TIPO_ID,TDET_ID")>  _
	Public Property historial() As EntitySet(Of historial)
		Get
			Return Me._historial
		End Get
		Set
			Me._historial.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_historial(ByVal entity As historial)
		Me.SendPropertyChanging
		entity.tipo_detalle = Me
	End Sub
	
	Private Sub detach_historial(ByVal entity As historial)
		Me.SendPropertyChanging
		entity.tipo_detalle = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.trabajador")>  _
Partial Public Class trabajador
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TRAB_ID As Integer
	
	Private _TRAB_CODIGO As String
	
	Private _TRAB_RAZONSOCIAL As String
	
	Private _historial As EntitySet(Of historial)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTRAB_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTRAB_IDChanged()
    End Sub
    Partial Private Sub OnTRAB_CODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnTRAB_CODIGOChanged()
    End Sub
    Partial Private Sub OnTRAB_RAZONSOCIALChanging(value As String)
    End Sub
    Partial Private Sub OnTRAB_RAZONSOCIALChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._historial = New EntitySet(Of historial)(AddressOf Me.attach_historial, AddressOf Me.detach_historial)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRAB_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TRAB_ID() As Integer
		Get
			Return Me._TRAB_ID
		End Get
		Set
			If ((Me._TRAB_ID = value)  _
						= false) Then
				Me.OnTRAB_IDChanging(value)
				Me.SendPropertyChanging
				Me._TRAB_ID = value
				Me.SendPropertyChanged("TRAB_ID")
				Me.OnTRAB_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRAB_CODIGO", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property TRAB_CODIGO() As String
		Get
			Return Me._TRAB_CODIGO
		End Get
		Set
			If (String.Equals(Me._TRAB_CODIGO, value) = false) Then
				Me.OnTRAB_CODIGOChanging(value)
				Me.SendPropertyChanging
				Me._TRAB_CODIGO = value
				Me.SendPropertyChanged("TRAB_CODIGO")
				Me.OnTRAB_CODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRAB_RAZONSOCIAL", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property TRAB_RAZONSOCIAL() As String
		Get
			Return Me._TRAB_RAZONSOCIAL
		End Get
		Set
			If (String.Equals(Me._TRAB_RAZONSOCIAL, value) = false) Then
				Me.OnTRAB_RAZONSOCIALChanging(value)
				Me.SendPropertyChanging
				Me._TRAB_RAZONSOCIAL = value
				Me.SendPropertyChanged("TRAB_RAZONSOCIAL")
				Me.OnTRAB_RAZONSOCIALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="trabajador_historial", Storage:="_historial", ThisKey:="TRAB_ID", OtherKey:="TRAB_ID")>  _
	Public Property historial() As EntitySet(Of historial)
		Get
			Return Me._historial
		End Get
		Set
			Me._historial.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_historial(ByVal entity As historial)
		Me.SendPropertyChanging
		entity.trabajador = Me
	End Sub
	
	Private Sub detach_historial(ByVal entity As historial)
		Me.SendPropertyChanging
		entity.trabajador = Nothing
	End Sub
End Class
